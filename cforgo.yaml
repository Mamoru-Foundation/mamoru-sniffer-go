---
GENERATOR:
  PackageName: generated_bindings
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  SysIncludes: [ "libmamoru_sniffer_go.h" ]
  FlagGroups:
    - { name: CFLAGS, flags: [ "-I${SRCDIR}/../packaged/include" ] }
    - { name: LDFLAGS, flags: [ "-lmamoru_sniffer_go" ] }
    - { name: LDFLAGS, traits: [ "darwin,arm64" ], flags: [ "-framework Security -L${SRCDIR}/../packaged/lib/darwin-arm64" ] }
    - { name: LDFLAGS, traits: [ "linux,amd64" ], flags: [ "-Wl,--no-as-needed -ldl -lm -L${SRCDIR}/../packaged/lib/linux-amd64" ] }
  Options:
    SafeStrings: true

PARSER:
  SourcesPaths: [ packaged/include/libmamoru_sniffer_go.h ]

TRANSLATOR:
  ConstRules:
    defines: expand
    enum: expand
  PtrTips:
    function:
      - { target: "^sniffer_result_get_error_message", self: ref, tips: [ ref, ref ] }
      - { target: "^sniffer_result_get_sniffer", tips: [ ref, ref ] }
      - { target: "^sniffer_observe_data", tips: [ ref, ref ] }
      - { target: "^blockchain_data_ctx_builder_add_data", tips: [ ref, ref ] }
      - { target: "^blockchain_data_ctx_builder_finish", tips: [ ref ] }
      - { target: "^new_value_data", tips: [ ref ] }
      - { target: "^value_list_append", tips: [ ref, ref ] }
      - { target: "^value_struct_add_field", tips: [ ref, 0, ref ] }
      - { target: "^transaction_batch_append", tips: [ ref ] }
      - { target: "^transaction_batch_finish", tips: [ ref ] }
      - { target: "^call_trace_batch_append", tips: [ ref ] }
      - { target: "^call_trace_batch_finish", tips: [ ref ] }
      - { target: "^call_trace_arg_batch_append", tips: [ ref ] }
      - { target: "^call_trace_arg_batch_finish", tips: [ ref ] }
      - { target: "^block_batch_append", tips: [ ref ] }
      - { target: "^block_batch_finish", tips: [ ref ] }
      - { target: "^event_batch_append", tips: [ ref ] }
      - { target: "^event_batch_finish", tips: [ ref ] }
      - { target: "^event_topic_batch_append", tips: [ ref ] }
      - { target: "^event_topic_batch_finish", tips: [ ref ] }
    struct:
      - { target: "^slice_(.+)_t", tips: [ sref ] }
  Rules:
    global:
      - { transform: title }
      - { action: accept, from: "^Ffi" }
      - { action: accept, from: "^new_" }
      - { action: accept, from: "^sniffer_" }
      - { action: accept, from: "^blockchain_" }
      - { action: accept, from: "^value_" }
      - { action: accept, from: "^slice_(.+)_t" }
      - { action: accept, from: "^transaction_" }
      - { action: accept, from: "^call_trace_" }
      - { action: accept, from: "^block_" }
      - { action: accept, from: "^event_" }
      - { action: accept, from: "^event_topic_" }

      - { transform: export }
    post-global:
      - { action: replace, from: _$ }
      - { load: snakecase }
